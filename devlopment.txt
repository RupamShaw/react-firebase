playlist start from first create-rect-app 
https://www.youtube.com/watch?v=bqckLTOwdwg&index=2&list=PLbG4OyfwIxjFKJE_ZVZxsSt1ESc9S7kFb How to Create Custom React Components
https://coderjourney.com/tutorials/how-to-create-custom-react-components/
https://github.com/martijnversluis/ChordSheetJS 
npm install chordsheetjs 
 dangerouslySetInnerHTML is from react to give rawHTML


 -----------------part 2
npm test this will be watcher 
for running one time  > CI=tru npm test

enzyme by airbnb 
jest by facebook

http://airbnb.io/enzyme/docs/installation/react-16.html
npm i --save-dev enzyme enzyme-adapter-react-16 
npm i --save-dev react-test-renderer@16

cp app.test.js chordEditor.test.js
import { shallow } from 'enzyme';

describe('<ChordEditor />', () => {
  it('renders an editor area', () => {
    const editor = shallow(<ChordEditor />);
    expect(editor.find('textarea').length).toEqual(1);
  });

  did  test via enzyme 

  ---------------------part 3
  refactoring code using state and props
  "test": "react-scripts test --env=jsdom --setupTestFrameworkScriptFile=raf/polyfill",
------------------part 4---route
yarn react-router-dom


-----part 5 --Integrate React with Firebase ---
https://coderjourney.com/tutorials/how-to-integrate-react-with-firebase/
https://www.youtube.com/watch?v=vmLaZafaw9E&index=6&list=PLbG4OyfwIxjFKJE_ZVZxsSt1ESc9S7kFb How to Integrate React with Firebase 
 npm i re-base firebase

in base.js
const app = firebase.initializeApp(config);
const base = Rebase.createClass(app.database())
const facebookProvider = new firebase.auth.FacebookAuthProvider()

in componentwillmount this.songsRef = base.syncState('songs', {
          context: this,
          state: 'songs'
        });

addsong() in App.js


If you load the application to the /songs route, you’ll no longer see anything, so we need to create a way 
for us to add songs. Let’s create 
an  addSong method on App for now that we can manually use from the console.

With this new method in place you can now use the React dev tools in Chrome or Firefox to create a 
new song by finding and clicking the App component and then running the following in the javascript 
console: 

$r.addSong("Test Song")


===============part 6 style 
yarn add @blueprintjs react-addons-css-transition-group
in index.js
import 'normalize.css/normalize.css';
import '@blueprintjs/core/dist/blueprint.css';

header.js with navigation

/songs made SongList separate component

flex style used for compression depending on screensize view changes

App.js
in render() removed wrapper style and added style={{maxWidth: "1160px", margin: "0 auto" }}
main-content style added

ChordEditor.js
import {Breadcrumb} from '@blueprintjs/core'

cleanup package.json

=========================part 7 --How to Use Firebase Authentication with React 
https://coderjourney.com/tutorials/how-to-add-authentication-to-react-with-firebase/
https://www.youtube.com/watch?v=XMuoDQy61ys&list=PLbG4OyfwIxjFKJE_ZVZxsSt1ESc9S7kFb&index=8  

https://console.firebase.google.com/u/0/project/react-todo-6f169/authentication/users
 in authentication  then signin method
enable the “Email/Password” provider by clicking the row and then selecting to enable it from the
 dialog. When  you enable the 
“Facebook” provider, you’ll then need to get an application id and secret.

https://developers.facebook.com/ for id and secret create app UserChord 
add product to facebook and setup settings and in YesNo
Embedded Browser OAuth Login  >>> then in Valid OAuth redirect URIs ---paste uri  which we selected in firebase facebook oAuthURL 


2 ways -1 by facebook 2nd for user pwd

add facebook button separate Login component

Utilizing Firebase Authentication
Re-base provides us with a way to interact with the data that we’ve stored in Firebase, but the most recent version of the library 
dropped support for authentication (because you can use the firebase.Application itself for that). Our src/base.js is currently only 
exporting the base constant, so we’ll need to add app to the list so that we can utilize it from our Login component. 
We’ll also need to have a FacebookAuthProvider, so we’ll create one of those in src/base.js and return that too.
in /base.js // lines above omitted
const facebookProvider = new firebase.auth.FacebookAuthProvider()
export { app, base, facebookProvider }



Let’s pull in app and facebookProvider and set up our Facebook login first by implementing our authWithFacebook function.
 We’re also going to add in a way to redirect using the Redirect component from react-router. To show errors, we’ll use a Toaster 
 from Blueprintjs.

src/components/Login.js
const { redirect } = this.state

    if (redirect) {
      return (
        <Redirect to={from} />
      )
    }

but after returning back its lost so lifecycle method to call

If we click the button to “Log In with Facebook” we will see a popup the first time that requires us to authorize the application, 
but every time after that the popup should open and then quickly close and redirect us. The redirect works, but our header didn’t 
change as we expected. It makes sense because we didn’t set the authenticated state. For our application to work the way we want it
 to we’re going to need to tie some authentication login into the life-cycle of our application in componentWillMount. 
 Let’s add this to App now.
componentwillmount(){
this.removeAuthListener = app.auth().onAuthStateChanged((user) => {
      if (user) {
        this.setState({
          authenticated: true,
        }else
        else {
        this.setState({
          authenticated: false,
        })
      base.removeBinding(this.songsRef);
      }    


      ===================part 8 email login 
      https://coderjourney.com/tutorials/how-to-add-authentication-to-react-with-firebase/
      This flash isn’t ideal, and we can get around it by adding a piece of state to indicate that the app is loading and 
      then always set it to false once our onAuthStateChanged callback has run. If we’re loading we’ll render a 
      Spinner from blueprintjs, otherwise, we’ll render the application as we have been

      App.js
      in componentWillMount add state loading: true 

      ----------logout--
      after Logout component creation in app.js add route  and header add button
      -------------emailpassword------
      3 cases 
      
      1. A user with the given email may exist, having signed in using Facebook.
      2. The user might not yet exist, so we need to register them.
      3. The user might exist and we get an error when signing in.

      To handle these cases we’re going to be making first a call to get the providers attached to the email address.
       Using the provider list, we’ll be able to determine where to go next or what message to show the user. 


      ========part 9 tie songs with user by authenticted routes
      We’re going to create an AuthenticatedRoute component that does the checking of our current user’s
     authenticated state and redirects accordingly. This component is going to be small, so, for now,
       we’re going to put it directly into src/App.js